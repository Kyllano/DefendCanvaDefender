import base64
from PIL import Image
import io

# Decode the base64 data
data = ''
decoded_data = base64.b64decode(data)

# Open the image file using Pillow
image = Image.open(io.BytesIO(decoded_data))

# Get the pixel values for each pixel in the image
pixels = image.load()
width, height = image.size

for py in range(height):
    if (py<30):
        for px in range(width):
            if (px<40):
                r, g, b, a = pixels[px, py]
                print(f'Pixel at ({px}, {py}): RGBA({r}, {g}, {b}, {a})')
